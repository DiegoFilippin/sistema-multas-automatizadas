/**
 * Teste espec√≠fico para simular o cen√°rio exato do usu√°rio
 * onde o n8n retorna um array com objeto contendo 'response'
 */

// Simular exatamente a resposta que o usu√°rio mencionou
const simulatedN8nResponse = [
  {
    "response": "Realizei consulta preliminar, mas para an√°lise precisa do auto de infra√ß√£o n¬∫ BLU0589972 referente ao c√≥digo 7455-0, data 15/03/2025, em Blumenau, c√≥digo este, conforme base, que n√£o corresponde diretamente a um c√≥digo de infra√ß√£o comum do CTB, parecendo reger autua√ß√µes espec√≠ficas municipais.\n\nPara aprimorar a an√°lise e identificar poss√≠veis erros formais que possam levar √† nulidade da multa, preciso confirmar alguns pontos:\n\n[PERGUNTAS]\n\n1. O auto de infra√ß√£o apresenta todos os dados do agente notificante, como matr√≠cula e assinatura?\n2. A descri√ß√£o do local da infra√ß√£o (Rua Amazonas pr√≥ximo n¬∫ 840) est√° clara e suficiente para identificar o local exato, sem ambiguidades?\n3. Est√° indicado no auto o dispositivo legal ou norma municipal infringida com detalhamento (ex: legisla√ß√£o municipal espec√≠fica contra infra√ß√£o 7455-0)?\n4. Voc√™ percebeu algum erro ou informa√ß√£o que considera incorreta no auto, como dados do ve√≠culo (placa, marca, modelo) ou hor√°rios e datas?\n5. O √≥rg√£o autuador anexou ao auto algum tipo de prova, como fotos, v√≠deos ou documentos t√©cnicos?\n\nAl√©m disso, para auxiliar na melhor estrat√©gia, informe-me, por favor:\n\n6. Qual sua justificativa para pedir a anula√ß√£o da autua√ß√£o?\n7. Nos √∫ltimos 12 meses, voc√™ teve outras multas de tr√¢nsito? Se sim, de qual natureza?\n\nCom estas informa√ß√µes, poderei verificar minuciosamente as regras do MBFT e procedimentos legais, identificar inconsist√™ncias e orientar a elabora√ß√£o do recurso mais eficaz para cancelar ou, se invi√°vel, solicitar a convers√£o em advert√™ncia, se aplic√°vel."
  }
];

/**
 * Fun√ß√£o que simula o processamento corrigido no TesteRecursoIA.tsx
 */
function processN8nResponseFixed(webhookResponse) {
  console.log('üîç === PROCESSANDO RESPOSTA DO N8N (L√ìGICA CORRIGIDA) ===');
  console.log('üìã Resposta completa:', JSON.stringify(webhookResponse, null, 2));
  console.log('üîç Tipo da resposta:', typeof webhookResponse);
  console.log('üìä √â array?', Array.isArray(webhookResponse));
  
  // Processar resposta do n8n (pode ser array ou objeto)
  let responseContent = '';
  if (Array.isArray(webhookResponse) && webhookResponse.length > 0) {
    // Se for array, pegar o primeiro item e extrair a resposta
    const firstItem = webhookResponse[0];
    responseContent = firstItem.response || firstItem.message || JSON.stringify(firstItem);
    console.log('üìã Processando array - primeiro item:', firstItem);
    console.log('üí¨ Conte√∫do extra√≠do do array:', responseContent.substring(0, 200) + '...');
  } else if (webhookResponse && typeof webhookResponse === 'object') {
    // Se for objeto direto
    responseContent = webhookResponse.response || webhookResponse.message || JSON.stringify(webhookResponse);
    console.log('üí¨ Conte√∫do extra√≠do do objeto:', responseContent.substring(0, 200) + '...');
  } else {
    // Fallback
    responseContent = 'Mensagem recebida e processada pelo sistema n8n.';
    console.log('‚ö†Ô∏è Usando conte√∫do fallback');
  }
  
  return responseContent;
}

/**
 * Fun√ß√£o que simula o processamento antigo (com problema)
 */
function processN8nResponseOld(webhookResponse) {
  console.log('üîç === PROCESSANDO RESPOSTA DO N8N (L√ìGICA ANTIGA) ===');
  console.log('üìã Resposta completa:', webhookResponse);
  console.log('üí¨ Conte√∫do da resposta:', webhookResponse.response || webhookResponse.message);
  console.log('üîç Tipo da resposta:', typeof webhookResponse);
  console.log('üìä Keys da resposta:', Object.keys(webhookResponse));
  
  // L√≥gica antiga que n√£o funcionava com arrays
  const content = webhookResponse.response || webhookResponse.message || 'Mensagem recebida e processada pelo sistema n8n.';
  
  return content;
}

/**
 * Simular salvamento no banco de dados
 */
function simulateDatabaseSave(content, sessionId) {
  console.log('üíæ === SIMULANDO SALVAMENTO NO BANCO ===');
  console.log('üÜî Session ID:', sessionId);
  console.log('üí¨ Conte√∫do a ser salvo:', content.substring(0, 100) + '...');
  console.log('‚úÖ Mensagem salva no banco de dados (simulado)');
  
  return {
    id: `msg_${Date.now()}`,
    chatSessionId: sessionId,
    messageType: 'assistant',
    content: content,
    metadata: {
      source: 'n8n_webhook_response',
      timestamp: new Date().toISOString()
    }
  };
}

/**
 * Teste comparativo
 */
function runComparativeTest() {
  console.log('üß™ TESTE COMPARATIVO - ANTES vs DEPOIS DA CORRE√á√ÉO');
  console.log('=' .repeat(70));
  
  console.log('\n1Ô∏è‚É£ === TESTANDO L√ìGICA ANTIGA (COM PROBLEMA) ===');
  try {
    const oldResult = processN8nResponseOld(simulatedN8nResponse);
    console.log('üì§ Resultado da l√≥gica antiga:', oldResult);
    console.log('‚ùå Problema: Tentou acessar .response em um array, retornou undefined');
  } catch (error) {
    console.error('üí• Erro na l√≥gica antiga:', error.message);
  }
  
  console.log('\n2Ô∏è‚É£ === TESTANDO L√ìGICA NOVA (CORRIGIDA) ===');
  try {
    const newResult = processN8nResponseFixed(simulatedN8nResponse);
    console.log('üì§ Resultado da l√≥gica nova:', newResult.substring(0, 200) + '...');
    console.log('‚úÖ Sucesso: Detectou array e extraiu conte√∫do corretamente');
    
    // Simular salvamento
    const savedMessage = simulateDatabaseSave(newResult, 'chat_session_123');
    console.log('üíæ Mensagem salva:', {
      id: savedMessage.id,
      contentLength: savedMessage.content.length,
      source: savedMessage.metadata.source
    });
    
  } catch (error) {
    console.error('üí• Erro na l√≥gica nova:', error.message);
  }
  
  console.log('\nüéØ === CONCLUS√ÉO ===');
  console.log('‚úÖ A corre√ß√£o resolve o problema do usu√°rio!');
  console.log('üìã Agora o sistema consegue processar arrays retornados pelo n8n');
  console.log('üíæ As mensagens s√£o salvas corretamente no hist√≥rico');
  console.log('üëÅÔ∏è As mensagens aparecem na interface do chat');
}

/**
 * Teste de diferentes cen√°rios
 */
function testDifferentScenarios() {
  console.log('\nüî¨ === TESTANDO DIFERENTES CEN√ÅRIOS ===');
  
  const scenarios = [
    {
      name: 'Array com response (cen√°rio do usu√°rio)',
      data: [{ response: 'Resposta em array' }]
    },
    {
      name: 'Array com message',
      data: [{ message: 'Mensagem em array' }]
    },
    {
      name: 'Objeto direto com response',
      data: { response: 'Resposta em objeto' }
    },
    {
      name: 'Objeto direto com message',
      data: { message: 'Mensagem em objeto' }
    },
    {
      name: 'Array vazio',
      data: []
    },
    {
      name: 'Null/undefined',
      data: null
    }
  ];
  
  scenarios.forEach((scenario, index) => {
    console.log(`\n${index + 1}. Testando: ${scenario.name}`);
    try {
      const result = processN8nResponseFixed(scenario.data);
      console.log(`   ‚úÖ Resultado: ${result.substring(0, 50)}${result.length > 50 ? '...' : ''}`);
    } catch (error) {
      console.log(`   ‚ùå Erro: ${error.message}`);
    }
  });
}

// Executar todos os testes
console.log('üß™ TESTE DE CORRE√á√ÉO DO PROCESSAMENTO DE RESPOSTA N8N');
console.log('=' .repeat(70));

runComparativeTest();
testDifferentScenarios();

console.log('\nüèÅ Todos os testes conclu√≠dos!');
console.log('\nüìù RESUMO DA CORRE√á√ÉO:');
console.log('   ‚Ä¢ Detecta se a resposta √© um array');
console.log('   ‚Ä¢ Extrai o conte√∫do do primeiro item do array');
console.log('   ‚Ä¢ Mant√©m compatibilidade com objetos diretos');
console.log('   ‚Ä¢ Fornece fallback para casos inv√°lidos');
console.log('   ‚Ä¢ Salva corretamente no banco de dados');
console.log('   ‚Ä¢ Exibe no hist√≥rico da conversa');