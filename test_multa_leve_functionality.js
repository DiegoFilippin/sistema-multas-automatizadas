// Teste da funcionalidade de multa leve
// Este script testa a an√°lise de multas leves e sugest√£o de advert√™ncia por escrito

import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL || 'your-supabase-url';
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || 'your-supabase-anon-key';
const supabase = createClient(supabaseUrl, supabaseKey);

// Fun√ß√£o para testar a funcionalidade de multa leve
async function testarFuncionalidadeMultaLeve() {
  console.log('üß™ === INICIANDO TESTES DE MULTA LEVE ===');
  
  try {
    // 1. Testar verifica√ß√£o de hist√≥rico do condutor
    console.log('\nüìã Teste 1: Verifica√ß√£o de hist√≥rico do condutor');
    await testarVerificacaoHistorico();
    
    // 2. Testar determina√ß√£o do tipo de gravidade
    console.log('\nüìã Teste 2: Determina√ß√£o do tipo de gravidade');
    await testarTipoGravidade();
    
    // 3. Testar an√°lise completa de multa leve
    console.log('\nüìã Teste 3: An√°lise completa de multa leve');
    await testarAnaliseCompleta();
    
    // 4. Testar cria√ß√£o de multa com an√°lise integrada
    console.log('\nüìã Teste 4: Cria√ß√£o de multa com an√°lise integrada');
    await testarCriacaoComAnalise();
    
    // 5. Testar modelos de advert√™ncia
    console.log('\nüìã Teste 5: Modelos de advert√™ncia');
    await testarModelosAdvertencia();
    
    console.log('\n‚úÖ === TODOS OS TESTES CONCLU√çDOS ===');
    
  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error);
  }
}

// Teste 1: Verifica√ß√£o de hist√≥rico do condutor
async function testarVerificacaoHistorico() {
  console.log('üîç Testando verifica√ß√£o de hist√≥rico...');
  
  // Dados de teste
  const testCases = [
    {
      cpf: '12345678901',
      descricao: 'CPF sem hist√≥rico (esperado: false)'
    },
    {
      cpf: '98765432100',
      descricao: 'CPF com poss√≠vel hist√≥rico (esperado: true/false)'
    }
  ];
  
  for (const testCase of testCases) {
    try {
      console.log(`  üìù ${testCase.descricao}`);
      
      // Calcular data de 12 meses atr√°s
      const dataReferencia = new Date();
      const dataLimite = new Date(dataReferencia);
      dataLimite.setFullYear(dataLimite.getFullYear() - 1);
      
      // Buscar multas do condutor nos √∫ltimos 12 meses
      const { data: multas, error } = await supabase
        .from('multas')
        .select('*')
        .or(`cpf_cnpj_proprietario.eq.${testCase.cpf},condutor.ilike.%${testCase.cpf}%`)
        .gte('data_infracao', dataLimite.toISOString().split('T')[0])
        .lte('data_infracao', dataReferencia.toISOString().split('T')[0]);
      
      if (error) {
        console.error(`    ‚ùå Erro na consulta:`, error);
        continue;
      }
      
      const quantidadeMultas = multas?.length || 0;
      const temHistorico = quantidadeMultas > 0;
      
      console.log(`    ‚úÖ Resultado: ${temHistorico ? 'TEM' : 'N√ÉO TEM'} hist√≥rico (${quantidadeMultas} multas)`);
      
    } catch (error) {
      console.error(`    ‚ùå Erro no teste:`, error);
    }
  }
}

// Teste 2: Determina√ß√£o do tipo de gravidade
async function testarTipoGravidade() {
  console.log('üè∑Ô∏è Testando determina√ß√£o do tipo de gravidade...');
  
  const testCases = [
    { codigo: '50110', esperado: 'leve', descricao: 'Estacionamento irregular' },
    { codigo: '60210', esperado: 'media', descricao: 'Velocidade 20-50% acima' },
    { codigo: '60310', esperado: 'grave', descricao: 'Velocidade acima de 50%' },
    { codigo: '60410', esperado: 'gravissima', descricao: 'Velocidade muito acima' },
    { codigo: '99999', esperado: 'media', descricao: 'C√≥digo n√£o mapeado (fallback)' }
  ];
  
  for (const testCase of testCases) {
    console.log(`  üìù ${testCase.descricao} (${testCase.codigo})`);
    
    // Simular a l√≥gica de determina√ß√£o (baseada no multaLeveService)
    const tipoGravidade = determinarTipoGravidadeTeste(testCase.codigo);
    
    const resultado = tipoGravidade === testCase.esperado ? '‚úÖ' : '‚ùå';
    console.log(`    ${resultado} Resultado: ${tipoGravidade} (esperado: ${testCase.esperado})`);
  }
}

// Fun√ß√£o auxiliar para teste de tipo de gravidade
function determinarTipoGravidadeTeste(codigoInfracao) {
  const codigo = codigoInfracao.trim();
  
  const infracoesLeves = ['50110', '50120', '50130', '60110', '60120', '60130', '70110', '70120', '70130'];
  const infracoesMedias = ['60210', '60220', '60230', '70210', '70220', '70230'];
  const infracoesGraves = ['60310', '60320', '60330', '70310', '70320', '70330'];
  const infracoesGravissimas = ['60410', '60420', '60430', '70410', '70420', '70430'];
  
  if (infracoesLeves.includes(codigo)) return 'leve';
  if (infracoesMedias.includes(codigo)) return 'media';
  if (infracoesGraves.includes(codigo)) return 'grave';
  if (infracoesGravissimas.includes(codigo)) return 'gravissima';
  
  return 'media'; // fallback
}

// Teste 3: An√°lise completa de multa leve
async function testarAnaliseCompleta() {
  console.log('üîç Testando an√°lise completa de multa leve...');
  
  const testCases = [
    {
      codigoInfracao: '50110',
      cpfCondutor: '12345678901',
      descricao: 'Multa leve, condutor sem hist√≥rico (esperado: sugerir advert√™ncia)'
    },
    {
      codigoInfracao: '60210',
      cpfCondutor: '12345678901',
      descricao: 'Multa m√©dia, condutor sem hist√≥rico (esperado: n√£o sugerir advert√™ncia)'
    }
  ];
  
  for (const testCase of testCases) {
    console.log(`  üìù ${testCase.descricao}`);
    
    try {
      // Simular an√°lise completa
      const tipoGravidade = determinarTipoGravidadeTeste(testCase.codigoInfracao);
      const isMultaLeve = tipoGravidade === 'leve';
      
      // Verificar hist√≥rico (simulado)
      const temHistorico = false; // Para teste, assumir sem hist√≥rico
      
      // Determinar se deve sugerir advert√™ncia
      const sugerirAdvertencia = isMultaLeve && !temHistorico;
      
      console.log(`    üìä Tipo: ${tipoGravidade}`);
      console.log(`    üìà Hist√≥rico: ${temHistorico ? 'SIM' : 'N√ÉO'}`);
      console.log(`    üìù Sugerir advert√™ncia: ${sugerirAdvertencia ? 'SIM' : 'N√ÉO'}`);
      
      const resultado = (isMultaLeve && sugerirAdvertencia) || (!isMultaLeve && !sugerirAdvertencia) ? '‚úÖ' : '‚ùå';
      console.log(`    ${resultado} An√°lise conclu√≠da`);
      
    } catch (error) {
      console.error(`    ‚ùå Erro na an√°lise:`, error);
    }
  }
}

// Teste 4: Cria√ß√£o de multa com an√°lise integrada
async function testarCriacaoComAnalise() {
  console.log('üíæ Testando cria√ß√£o de multa com an√°lise integrada...');
  
  // Dados de teste para multa
  const multaTeste = {
    company_id: 'test-company-id',
    client_id: 'test-client-id',
    numero_auto: 'TEST-001',
    placa_veiculo: 'TEST123',
    data_infracao: new Date().toISOString().split('T')[0],
    data_vencimento: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    valor_original: 100.00,
    valor_final: 100.00,
    codigo_infracao: '50110', // Multa leve
    local_infracao: 'Rua de Teste, 123',
    descricao_infracao: 'Estacionamento em local proibido',
    orgao_autuador: 'DETRAN-TEST',
    pontos: 3
  };
  
  console.log('  üìù Simulando cria√ß√£o de multa com an√°lise...');
  console.log(`    üè∑Ô∏è C√≥digo da infra√ß√£o: ${multaTeste.codigo_infracao}`);
  console.log(`    üë§ CPF do condutor: 12345678901`);
  
  // Simular o processo
  const tipoGravidade = determinarTipoGravidadeTeste(multaTeste.codigo_infracao);
  const isMultaLeve = tipoGravidade === 'leve';
  const temHistorico = false; // Simulado
  const sugerirAdvertencia = isMultaLeve && !temHistorico;
  
  console.log(`    üìä Resultado da an√°lise:`);
  console.log(`      - Tipo de gravidade: ${tipoGravidade}`);
  console.log(`      - √â multa leve: ${isMultaLeve ? 'SIM' : 'N√ÉO'}`);
  console.log(`      - Tem hist√≥rico: ${temHistorico ? 'SIM' : 'N√ÉO'}`);
  console.log(`      - Sugerir advert√™ncia: ${sugerirAdvertencia ? 'SIM' : 'N√ÉO'}`);
  
  console.log(`    ‚úÖ Simula√ß√£o de cria√ß√£o com an√°lise conclu√≠da`);
}

// Teste 5: Modelos de advert√™ncia
async function testarModelosAdvertencia() {
  console.log('üìÑ Testando modelos de advert√™ncia...');
  
  try {
    // Buscar modelos de advert√™ncia no banco
    const { data: modelos, error } = await supabase
      .from('modelos_advertencia')
      .select('*')
      .eq('ativo', true);
    
    if (error) {
      console.error('    ‚ùå Erro ao buscar modelos:', error);
      return;
    }
    
    console.log(`    üìä Encontrados ${modelos?.length || 0} modelos ativos`);
    
    if (modelos && modelos.length > 0) {
      for (const modelo of modelos) {
        console.log(`    üìÑ Modelo: ${modelo.nome}`);
        console.log(`      - Tipo: ${modelo.tipo_infracao}`);
        console.log(`      - T√≠tulo: ${modelo.titulo}`);
        console.log(`      - Tamanho do conte√∫do: ${modelo.conteudo?.length || 0} caracteres`);
      }
      
      // Testar gera√ß√£o de advert√™ncia personalizada
      const modeloTeste = modelos[0];
      const dadosMultaTeste = {
        nomeCondutor: 'Jo√£o da Silva',
        cpfCondutor: '12345678901',
        dataInfracao: '15/03/2025',
        localInfracao: 'Rua das Flores, 123',
        placaVeiculo: 'ABC1234',
        descricaoInfracao: 'Estacionamento em local proibido',
        codigoInfracao: '50110',
        numeroAuto: 'AUTO-123456',
        orgaoAutuador: 'DETRAN-SP'
      };
      
      console.log('    üìù Testando gera√ß√£o de advert√™ncia personalizada...');
      const advertenciaPersonalizada = gerarAdvertenciaPersonalizadaTeste(
        modeloTeste.conteudo,
        dadosMultaTeste
      );
      
      console.log(`    ‚úÖ Advert√™ncia gerada (${advertenciaPersonalizada.length} caracteres)`);
      console.log(`    üìÑ Pr√©via: ${advertenciaPersonalizada.substring(0, 100)}...`);
    } else {
      console.log('    ‚ö†Ô∏è Nenhum modelo de advert√™ncia encontrado');
    }
    
  } catch (error) {
    console.error('    ‚ùå Erro no teste de modelos:', error);
  }
}

// Fun√ß√£o auxiliar para teste de gera√ß√£o de advert√™ncia
function gerarAdvertenciaPersonalizadaTeste(modeloBase, dadosMulta) {
  let advertenciaPersonalizada = modeloBase;
  
  const substituicoes = {
    '{NOME_CONDUTOR}': dadosMulta.nomeCondutor,
    '{CPF_CONDUTOR}': dadosMulta.cpfCondutor,
    '{DATA_INFRACAO}': dadosMulta.dataInfracao,
    '{LOCAL_INFRACAO}': dadosMulta.localInfracao,
    '{PLACA_VEICULO}': dadosMulta.placaVeiculo,
    '{DESCRICAO_INFRACAO}': dadosMulta.descricaoInfracao,
    '{CODIGO_INFRACAO}': dadosMulta.codigoInfracao,
    '{NUMERO_AUTO}': dadosMulta.numeroAuto,
    '{ORGAO_AUTUADOR}': dadosMulta.orgaoAutuador,
    '{CIDADE}': 'S√£o Paulo',
    '{DATA_ADVERTENCIA}': new Date().toLocaleDateString('pt-BR')
  };
  
  Object.entries(substituicoes).forEach(([placeholder, valor]) => {
    advertenciaPersonalizada = advertenciaPersonalizada.replace(
      new RegExp(placeholder.replace(/[{}]/g, '\\$&'), 'g'),
      valor
    );
  });
  
  return advertenciaPersonalizada;
}

// Fun√ß√£o para testar permiss√µes do banco
async function testarPermissoes() {
  console.log('\nüîê === TESTANDO PERMISS√ïES DO BANCO ===');
  
  try {
    // Testar acesso √† tabela multas
    console.log('üìã Testando acesso √† tabela multas...');
    const { data: multas, error: multasError } = await supabase
      .from('multas')
      .select('id, numero_auto, tipo_gravidade')
      .limit(5);
    
    if (multasError) {
      console.error('‚ùå Erro ao acessar tabela multas:', multasError);
    } else {
      console.log(`‚úÖ Acesso √† tabela multas OK (${multas?.length || 0} registros)`);
    }
    
    // Testar acesso √† tabela modelos_advertencia
    console.log('üìã Testando acesso √† tabela modelos_advertencia...');
    const { data: modelos, error: modelosError } = await supabase
      .from('modelos_advertencia')
      .select('id, nome, tipo_infracao')
      .limit(5);
    
    if (modelosError) {
      console.error('‚ùå Erro ao acessar tabela modelos_advertencia:', modelosError);
    } else {
      console.log(`‚úÖ Acesso √† tabela modelos_advertencia OK (${modelos?.length || 0} registros)`);
    }
    
  } catch (error) {
    console.error('‚ùå Erro no teste de permiss√µes:', error);
  }
}

// Executar todos os testes
async function executarTodosTestes() {
  console.log('üöÄ === INICIANDO BATERIA COMPLETA DE TESTES ===');
  
  await testarPermissoes();
  await testarFuncionalidadeMultaLeve();
  
  console.log('\nüéâ === BATERIA DE TESTES CONCLU√çDA ===');
}

// Executar se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  executarTodosTestes().catch(console.error);
}

export {
  testarFuncionalidadeMultaLeve,
  testarPermissoes,
  executarTodosTestes
};