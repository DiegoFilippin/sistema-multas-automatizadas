const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY);

async function testFinalServiceSync() {
  console.log('üéØ === TESTE FINAL DE SINCRONIZA√á√ÉO ===\n');
  
  try {
    // 1. Listar todos os servi√ßos ativos
    console.log('üìã Listando servi√ßos ativos...');
    const { data: services, error: servicesError } = await supabase
      .from('services')
      .select('id, name, acsm_value, icetran_value, taxa_cobranca, suggested_price, is_active, updated_at')
      .eq('is_active', true)
      .order('updated_at', { ascending: false });
    
    if (servicesError) {
      console.error('‚ùå Erro ao buscar servi√ßos:', servicesError);
      return;
    }
    
    console.log(`‚úÖ ${services.length} servi√ßos ativos encontrados:\n`);
    
    services.forEach((service, i) => {
      console.log(`${i+1}. ${service.name}`);
      console.log(`   ID: ${service.id}`);
      console.log(`   ACSM: R$ ${service.acsm_value}`);
      console.log(`   ICETRAN: R$ ${service.icetran_value}`);
      console.log(`   Taxa: R$ ${service.taxa_cobranca}`);
      console.log(`   Sugerido: R$ ${service.suggested_price}`);
      console.log(`   Atualizado: ${new Date(service.updated_at).toLocaleString('pt-BR')}`);
      console.log('');
    });
    
    // 2. Fazer uma pequena altera√ß√£o em um servi√ßo
    if (services.length > 0) {
      const serviceToUpdate = services[0];
      const newValue = (serviceToUpdate.suggested_price || 60) + 0.50;
      
      console.log(`üîÑ Fazendo pequena altera√ß√£o no servi√ßo "${serviceToUpdate.name}"...`);
      console.log(`   Valor atual: R$ ${serviceToUpdate.suggested_price}`);
      console.log(`   Novo valor: R$ ${newValue}`);
      
      const { data: updatedService, error: updateError } = await supabase
        .from('services')
        .update({
          suggested_price: newValue,
          updated_at: new Date().toISOString()
        })
        .eq('id', serviceToUpdate.id)
        .select()
        .single();
      
      if (updateError) {
        console.error('‚ùå Erro ao atualizar:', updateError);
        return;
      }
      
      console.log('‚úÖ Servi√ßo atualizado com sucesso!');
      console.log(`   Novo valor confirmado: R$ ${updatedService.suggested_price}`);
      console.log(`   Nova data: ${new Date(updatedService.updated_at).toLocaleString('pt-BR')}`);
      console.log('');
    }
    
    // 3. Instru√ß√µes para o usu√°rio
    console.log('üéØ PR√ìXIMOS PASSOS:');
    console.log('1. ‚úÖ Servi√ßos foram atualizados no banco de dados');
    console.log('2. üåê Acesse a tela "Meus Servi√ßos" no navegador');
    console.log('3. üîÑ Clique no bot√£o "Atualizar Servi√ßos" (canto superior direito)');
    console.log('4. üëÄ Verifique se os novos valores aparecem na interface');
    console.log('5. ‚è∞ Aguarde at√© 60 segundos para o refresh autom√°tico');
    console.log('');
    console.log('üîç DIAGN√ìSTICO:');
    console.log('- Se os valores N√ÉO aparecerem ap√≥s o refresh manual: problema de cache no frontend');
    console.log('- Se os valores aparecerem ap√≥s refresh manual: sistema funcionando corretamente');
    console.log('- Se houver refresh autom√°tico a cada 60s: sistema totalmente funcional');
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

testFinalServiceSync();