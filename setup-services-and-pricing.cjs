const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas');
  console.log('Certifique-se de que VITE_SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY est√£o definidas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function setupServicesAndPricing() {
  console.log('üöÄ Configurando servi√ßos e precifica√ß√£o...');

  try {
    // 1. Verificar se as tabelas j√° existem
    console.log('üìã Verificando tabelas existentes...');
    
    // Verificar se service_pricing existe
    const { data: servicePricingExists } = await supabase
      .from('service_pricing')
      .select('id')
      .limit(1);
    
    if (servicePricingExists !== null) {
      console.log('‚úÖ Tabela service_pricing j√° existe');
    } else {
      console.log('‚ÑπÔ∏è Tabela service_pricing n√£o existe - ser√° criada via interface admin');
    }

    // 2. Pular configura√ß√£o de RLS (ser√° feita via interface admin)
    console.log('‚ÑπÔ∏è Configura√ß√£o de RLS ser√° feita via interface administrativa');

    // 3. Criar os 2 servi√ßos iniciais
    console.log('üìù Criando servi√ßos iniciais...');
    
    const servicosIniciais = [
      {
        name: 'Recurso de multa',
        description: 'Servi√ßo de elabora√ß√£o e acompanhamento de recursos de multas de tr√¢nsito',
        category: 'juridico',
        pricing_type: 'fixed',
        fixed_value: 100.00,
        percentage_value: null,
        minimum_value: null,
        is_active: true
      },
      {
        name: 'Acompanhamento mensal',
        description: 'Servi√ßo de acompanhamento mensal de processos e recursos',
        category: 'acompanhamento',
        pricing_type: 'fixed',
        fixed_value: 50.00,
        percentage_value: null,
        minimum_value: null,
        is_active: true
      }
    ];

    for (const servico of servicosIniciais) {
      // Verificar se o servi√ßo j√° existe
      const { data: existingService } = await supabase
        .from('services')
        .select('id')
        .eq('name', servico.name)
        .single();

      if (!existingService) {
        const { data: newService, error: serviceError } = await supabase
          .from('services')
          .insert(servico)
          .select('id')
          .single();

        if (serviceError) {
          console.error(`‚ùå Erro ao criar servi√ßo '${servico.name}':`, serviceError);
          continue;
        }

        console.log(`‚úÖ Servi√ßo '${servico.name}' criado com sucesso`);

        console.log(`‚úÖ Servi√ßo '${servico.name}' criado - precifica√ß√£o ser√° configurada via interface`);
      } else {
        console.log(`‚ÑπÔ∏è Servi√ßo '${servico.name}' j√° existe`);
      }
    }

    // 5. Tabelas adicionais ser√£o criadas via interface administrativa
    console.log('‚ÑπÔ∏è Tabelas de precifica√ß√£o ser√£o criadas via interface administrativa');

    console.log('üéâ Configura√ß√£o inicial conclu√≠da com sucesso!');
    console.log('');
    console.log('üìã Resumo:');
    console.log('‚úÖ Servi√ßos iniciais criados: Recurso de multa, Acompanhamento mensal');
    console.log('‚ÑπÔ∏è Tabelas de precifica√ß√£o ser√£o criadas via interface administrativa');
    console.log('');
    console.log('üéØ Pr√≥ximos passos:');
    console.log('1. Acessar interface administrativa para configurar tabelas de precifica√ß√£o');
    console.log('2. Super Admin define valores base para ACSM');
    console.log('3. ICETRAN define seus valores na interface');
    console.log('4. Despachantes definem pre√ßos finais aos clientes');
    console.log('5. Sistema calcular√° automaticamente margens de lucro');

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

// Executar configura√ß√£o
setupServicesAndPricing();