import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

// Fun√ß√£o para verificar se uma multa √© leve
function isMultaLeve(valor, codigoInfracao) {
  // C√≥digos de infra√ß√µes leves do CTB
  const codigosLeves = [
    'VEL001', // Velocidade at√© 20% acima do limite
    '50110', '50120', '50130', '50140', '50150', '50160', '50170', '50180', '50190',
    '51110', '51120', '51130', '51140', '51150', '51160', '51170', '51180', '51190',
    '52110', '52120', '52130', '52140', '52150', '52160', '52170', '52180', '52190',
    '53110', '53120', '53130', '53140', '53150', '53160', '53170', '53180', '53190',
    '54110', '54120', '54130', '54140', '54150', '54160', '54170', '54180', '54190',
    '55110', '55120', '55130', '55140', '55150', '55160', '55170', '55180', '55190'
  ];
  
  // Verifica por c√≥digo
  if (codigoInfracao && codigosLeves.includes(codigoInfracao)) {
    return true;
  }
  
  // Verifica por valor (multas leves at√© R$ 293,47 em 2024)
  const valorNumerico = typeof valor === 'string' ? parseFloat(valor.replace(',', '.')) : valor;
  return valorNumerico <= 293.47;
}

// Fun√ß√£o para gerar conte√∫do de convers√£o para advert√™ncia
function gerarConteudoConversao(multa, cliente) {
  const dataAtual = new Date().toLocaleDateString('pt-BR');
  
  return {
    fundamentacao: `PEDIDO DE CONVERS√ÉO DE MULTA EM ADVERT√äNCIA POR ESCRITO

Ao √ìrg√£o Autuador Competente,

${cliente.nome}, portador(a) do CPF ${cliente.cpf_cnpj}, vem respeitosamente requerer a convers√£o da multa de tr√¢nsito em advert√™ncia por escrito, conforme previsto no Art. 267 do C√≥digo de Tr√¢nsito Brasileiro (Lei 9.503/97).

DADOS DA INFRA√á√ÉO:
- Auto de Infra√ß√£o: ${multa.numero_auto}
- Data da Infra√ß√£o: ${new Date(multa.data_infracao).toLocaleDateString('pt-BR')}
- Local: ${multa.local_infracao}
- C√≥digo da Infra√ß√£o: ${multa.codigo_infracao}
- Descri√ß√£o: ${multa.descricao_infracao}
- Valor: R$ ${multa.valor_original.toFixed(2)}
- Placa do Ve√≠culo: ${multa.placa_veiculo}

FUNDAMENTA√á√ÉO LEGAL:

O Art. 267 do C√≥digo de Tr√¢nsito Brasileiro estabelece que:

"Poder√° ser imposta a penalidade de advert√™ncia por escrito √† infra√ß√£o de natureza leve ou m√©dia, pass√≠vel de ser punida com multa, desde que n√£o tenha o infrator cometido nenhuma outra infra√ß√£o nos doze meses anteriores."

No presente caso, verifica-se que:

1. A infra√ß√£o √© de NATUREZA LEVE, conforme classifica√ß√£o do CTB;
2. O valor da multa (R$ ${multa.valor_original.toFixed(2)}) enquadra-se no patamar de infra√ß√µes leves;
3. O requerente N√ÉO possui registro de outras infra√ß√µes nos √∫ltimos 12 (doze) meses;
4. Trata-se de condutor prim√°rio, sem hist√≥rico de reincid√™ncia.

PEDIDO:

Diante do exposto e com fundamento no Art. 267 do CTB, requer-se:

a) A convers√£o da multa de tr√¢nsito em ADVERT√äNCIA POR ESCRITO;
b) O cancelamento da cobran√ßa da multa;
c) A anota√ß√£o da advert√™ncia no prontu√°rio do condutor.

Termos em que pede deferimento.

${cliente.nome}\nCPF: ${cliente.cpf_cnpj}\n\nData: ${dataAtual}`,
    
    argumentacao: `CONVERS√ÉO EM ADVERT√äNCIA POR ESCRITO - ART. 267 CTB

Esta solicita√ß√£o fundamenta-se no direito previsto no Art. 267 do C√≥digo de Tr√¢nsito Brasileiro, que permite a convers√£o de multas leves em advert√™ncia por escrito para condutores sem hist√≥rico de infra√ß√µes nos √∫ltimos 12 meses.

A infra√ß√£o em quest√£o (${multa.codigo_infracao}) √© classificada como LEVE e o condutor n√£o possui registro de outras infra√ß√µes no per√≠odo legal, atendendo plenamente aos requisitos legais para a convers√£o.

A aplica√ß√£o da advert√™ncia por escrito cumpre a fun√ß√£o educativa da penalidade, promovendo a conscientiza√ß√£o do condutor sem a imposi√ß√£o da san√ß√£o pecuni√°ria.`
  };
}

async function fixConversaoRecursos() {
  console.log('üîß Corrigindo recursos que deveriam ser convers√£o para advert√™ncia...');
  console.log('=' .repeat(70));
  
  try {
    // Buscar recursos de defesa_previa com multas leves
    const { data: recursos, error } = await supabase
      .from('recursos')
      .select(`
        id,
        tipo_recurso,
        status,
        fundamentacao,
        observacoes,
        multas!inner(
          id,
          numero_auto,
          placa_veiculo,
          data_infracao,
          valor_original,
          valor_final,
          codigo_infracao,
          descricao_infracao,
          local_infracao,
          clients!inner(
            nome,
            cpf_cnpj
          )
        )
      `)
      .eq('tipo_recurso', 'defesa_previa')
      .in('status', ['em_analise', 'rascunho'])
      .order('created_at', { ascending: false })
      .limit(50);
    
    if (error) {
      console.error('‚ùå Erro ao buscar recursos:', error.message);
      return;
    }
    
    if (!recursos || recursos.length === 0) {
      console.log('‚ÑπÔ∏è Nenhum recurso de defesa pr√©via encontrado');
      return;
    }
    
    console.log(`üìã Analisando ${recursos.length} recursos...\n`);
    
    let recursosCorrigidos = 0;
    
    for (const recurso of recursos) {
      const multa = recurso.multas;
      const cliente = multa.clients;
      
      // Verificar se √© multa leve
      const isLeve = isMultaLeve(multa.valor_original || multa.valor_final, multa.codigo_infracao);
      
      if (isLeve) {
        console.log(`üîç Recurso ${recurso.id}:`);
        console.log(`   Auto: ${multa.numero_auto}`);
        console.log(`   Valor: R$ ${(multa.valor_original || multa.valor_final).toFixed(2)}`);
        console.log(`   C√≥digo: ${multa.codigo_infracao}`);
        console.log(`   Cliente: ${cliente.nome}`);
        console.log(`   ‚úÖ √â multa leve - CORRIGINDO...`);
        
        // Gerar novo conte√∫do para convers√£o
        const novoConteudo = gerarConteudoConversao(multa, cliente);
        
        // Atualizar o recurso
        const { error: updateError } = await supabase
          .from('recursos')
          .update({
            tipo_recurso: 'conversao',
            fundamentacao: novoConteudo.fundamentacao,
            observacoes: novoConteudo.argumentacao,
            probabilidade_sucesso: 85, // Alta probabilidade para convers√µes
            updated_at: new Date().toISOString()
          })
          .eq('id', recurso.id);
        
        if (updateError) {
          console.log(`   ‚ùå Erro ao atualizar: ${updateError.message}`);
        } else {
          console.log(`   ‚úÖ Recurso corrigido para tipo "conversao"`);
          recursosCorrigidos++;
        }
        
        console.log('');
      } else {
        console.log(`‚è≠Ô∏è Recurso ${recurso.id}: N√£o √© multa leve (R$ ${(multa.valor_original || multa.valor_final).toFixed(2)})`);
      }
    }
    
    console.log('=' .repeat(70));
    console.log(`‚úÖ Corre√ß√£o conclu√≠da: ${recursosCorrigidos} recursos corrigidos`);
    
  } catch (error) {
    console.error('‚ùå Erro durante corre√ß√£o:', error.message);
  }
}

// Executar corre√ß√£o
fixConversaoRecursos();