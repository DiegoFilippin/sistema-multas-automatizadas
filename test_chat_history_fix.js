// Script para testar e corrigir o carregamento do hist√≥rico do chat

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

// Configura√ß√£o do Supabase (usar as mesmas credenciais do projeto)
const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://your-project.supabase.co';
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || 'your-anon-key';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testChatHistory() {
  console.log('üîç === TESTANDO HIST√ìRICO DO CHAT ===');
  
  try {
    // 1. Verificar se existem sess√µes de chat
    console.log('\n1. Verificando sess√µes de chat existentes...');
    const { data: sessions, error: sessionsError } = await supabase
      .from('chat_sessions')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(5);
    
    if (sessionsError) {
      console.error('‚ùå Erro ao buscar sess√µes:', sessionsError);
      return;
    }
    
    console.log(`üìã Encontradas ${sessions?.length || 0} sess√µes:`);
    sessions?.forEach((session, index) => {
      console.log(`  ${index + 1}. ID: ${session.id}`);
      console.log(`     Multa ID: ${session.multa_id}`);
      console.log(`     Status: ${session.status}`);
      console.log(`     Criada em: ${session.created_at}`);
      console.log('');
    });
    
    // 2. Verificar mensagens para cada sess√£o
    if (sessions && sessions.length > 0) {
      console.log('\n2. Verificando mensagens para cada sess√£o...');
      
      for (const session of sessions) {
        const { data: messages, error: messagesError } = await supabase
          .from('chat_messages')
          .select('*')
          .eq('chat_session_id', session.id)
          .order('created_at', { ascending: true });
        
        if (messagesError) {
          console.error(`‚ùå Erro ao buscar mensagens da sess√£o ${session.id}:`, messagesError);
          continue;
        }
        
        console.log(`üì® Sess√£o ${session.id}: ${messages?.length || 0} mensagens`);
        messages?.forEach((msg, index) => {
          console.log(`  ${index + 1}. ${msg.message_type}: ${msg.content.substring(0, 100)}...`);
          console.log(`     Criada em: ${msg.created_at}`);
        });
        console.log('');
      }
    }
    
    // 3. Testar busca por multa_id espec√≠fico
    console.log('\n3. Testando busca por multa_id...');
    if (sessions && sessions.length > 0) {
      const sessionWithMulta = sessions.find(s => s.multa_id);
      if (sessionWithMulta) {
        console.log(`üîç Testando busca para multa_id: ${sessionWithMulta.multa_id}`);
        
        const { data: sessionsByMulta, error: multaError } = await supabase
          .from('chat_sessions')
          .select('*')
          .eq('multa_id', sessionWithMulta.multa_id)
          .eq('status', 'active');
        
        if (multaError) {
          console.error('‚ùå Erro ao buscar por multa_id:', multaError);
        } else {
          console.log(`‚úÖ Encontradas ${sessionsByMulta?.length || 0} sess√µes ativas para esta multa`);
        }
      } else {
        console.log('‚ÑπÔ∏è Nenhuma sess√£o com multa_id encontrada para teste');
      }
    }
    
    // 4. Verificar permiss√µes das tabelas
    console.log('\n4. Verificando permiss√µes das tabelas...');
    const { data: permissions, error: permError } = await supabase
      .rpc('check_table_permissions');
    
    if (permError) {
      console.log('‚ÑπÔ∏è N√£o foi poss√≠vel verificar permiss√µes automaticamente');
      console.log('   Verifique manualmente se as tabelas chat_sessions e chat_messages');
      console.log('   t√™m permiss√µes adequadas para os roles anon e authenticated');
    } else {
      console.log('‚úÖ Permiss√µes verificadas');
    }
    
    // 5. Criar dados de teste se n√£o existirem
    if (!sessions || sessions.length === 0) {
      console.log('\n5. Criando dados de teste...');
      await createTestData();
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral no teste:', error);
  }
}

async function createTestData() {
  try {
    console.log('üìù Criando sess√£o de teste...');
    
    // Criar uma sess√£o de teste
    const { data: testSession, error: sessionError } = await supabase
      .from('chat_sessions')
      .insert({
        session_id: `test_session_${Date.now()}`,
        webhook_url: 'https://test.webhook.com',
        webhook_payload: { test: true },
        company_id: '00000000-0000-0000-0000-000000000001', // UUID de teste
        user_id: '00000000-0000-0000-0000-000000000002', // UUID de teste
        multa_id: '00000000-0000-0000-0000-000000000003', // UUID de teste
        status: 'active'
      })
      .select()
      .single();
    
    if (sessionError) {
      console.error('‚ùå Erro ao criar sess√£o de teste:', sessionError);
      return;
    }
    
    console.log('‚úÖ Sess√£o de teste criada:', testSession.id);
    
    // Criar mensagens de teste
    const testMessages = [
      {
        chat_session_id: testSession.id,
        message_type: 'user',
        content: 'Ol√°, preciso de ajuda com minha multa de tr√¢nsito.'
      },
      {
        chat_session_id: testSession.id,
        message_type: 'assistant',
        content: 'Ol√°! Posso ajud√°-lo com sua multa de tr√¢nsito. Vou analisar os dados e gerar um recurso para voc√™.'
      },
      {
        chat_session_id: testSession.id,
        message_type: 'user',
        content: 'Obrigado! A multa foi por excesso de velocidade.'
      },
      {
        chat_session_id: testSession.id,
        message_type: 'assistant',
        content: 'Entendi. Vou preparar um recurso contestando a multa por excesso de velocidade. Analisando os dados fornecidos...'
      }
    ];
    
    const { data: messages, error: messagesError } = await supabase
      .from('chat_messages')
      .insert(testMessages)
      .select();
    
    if (messagesError) {
      console.error('‚ùå Erro ao criar mensagens de teste:', messagesError);
      return;
    }
    
    console.log(`‚úÖ ${messages?.length || 0} mensagens de teste criadas`);
    
    // Testar carregamento do hist√≥rico
    console.log('\nüîÑ Testando carregamento do hist√≥rico...');
    const { data: loadedMessages, error: loadError } = await supabase
      .from('chat_messages')
      .select('*')
      .eq('chat_session_id', testSession.id)
      .order('created_at', { ascending: true });
    
    if (loadError) {
      console.error('‚ùå Erro ao carregar hist√≥rico:', loadError);
    } else {
      console.log(`‚úÖ Hist√≥rico carregado com sucesso: ${loadedMessages?.length || 0} mensagens`);
      loadedMessages?.forEach((msg, index) => {
        console.log(`  ${index + 1}. [${msg.message_type}] ${msg.content}`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao criar dados de teste:', error);
  }
}

async function fixChatHistoryLoading() {
  console.log('\nüîß === IMPLEMENTANDO CORRE√á√ÉO DO HIST√ìRICO ===');
  
  // Verificar se as fun√ß√µes de carregamento est√£o funcionando
  try {
    // Simular busca de sess√£o por empresa
    console.log('1. Testando busca de sess√µes por empresa...');
    const { data: companySessions, error: companyError } = await supabase
      .from('chat_sessions')
      .select('*')
      .limit(5);
    
    if (companyError) {
      console.error('‚ùå Erro na busca por empresa:', companyError);
    } else {
      console.log(`‚úÖ Busca por empresa funcionando: ${companySessions?.length || 0} sess√µes`);
    }
    
    // Testar busca de mensagens
    if (companySessions && companySessions.length > 0) {
      console.log('2. Testando busca de mensagens...');
      const sessionId = companySessions[0].id;
      
      const { data: sessionMessages, error: msgError } = await supabase
        .from('chat_messages')
        .select('*')
        .eq('chat_session_id', sessionId)
        .order('created_at', { ascending: true });
      
      if (msgError) {
        console.error('‚ùå Erro na busca de mensagens:', msgError);
      } else {
        console.log(`‚úÖ Busca de mensagens funcionando: ${sessionMessages?.length || 0} mensagens`);
      }
    }
    
    console.log('\n‚úÖ Diagn√≥stico conclu√≠do!');
    console.log('\nüìã RESUMO:');
    console.log('- As tabelas chat_sessions e chat_messages existem');
    console.log('- As fun√ß√µes de busca est√£o funcionando');
    console.log('- O problema pode estar na l√≥gica do frontend');
    console.log('\nüîß PR√ìXIMOS PASSOS:');
    console.log('1. Verificar se o chatSessionId est√° sendo definido corretamente');
    console.log('2. Verificar se o useEffect de loadChatHistory est√° sendo executado');
    console.log('3. Verificar se h√° erros de permiss√£o no console do navegador');
    console.log('4. Verificar se o company_id est√° correto na busca de sess√µes');
    
  } catch (error) {
    console.error('‚ùå Erro na corre√ß√£o:', error);
  }
}

// Executar testes
async function runTests() {
  await testChatHistory();
  await fixChatHistoryLoading();
}

// Executar testes se for o arquivo principal
if (import.meta.url === `file://${process.argv[1]}`) {
  runTests().catch(console.error);
}

export {
  testChatHistory,
  createTestData,
  fixChatHistoryLoading
};