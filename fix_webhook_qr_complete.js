// Script para corrigir completamente o problema do QR code no webhook
import fetch from 'node-fetch';

const API_BASE = 'http://localhost:3001';

async function fixWebhookQRComplete() {
  console.log('üîß === CORRE√á√ÉO COMPLETA DO WEBHOOK QR CODE ===\n');
  
  try {
    // 1. Identificar o problema principal
    console.log('1Ô∏è‚É£ IDENTIFICANDO O PROBLEMA:');
    console.log('   ‚ùå Cobran√ßa criada via webhook externo n√£o salva QR code');
    console.log('   ‚ùå Webhook do Asaas recebe dados mas cobran√ßa j√° existe sem QR');
    console.log('   ‚ùå Modal busca dados mas n√£o encontra QR code');
    
    // 2. Analisar o fluxo atual
    console.log('\n2Ô∏è‚É£ FLUXO ATUAL (PROBLEM√ÅTICO):');
    console.log('   1. Usu√°rio cria cobran√ßa ‚Üí POST /api/payments/create-service-order');
    console.log('   2. Sistema envia dados ‚Üí webhook externo (n8n)');
    console.log('   3. Webhook externo cria cobran√ßa no Asaas');
    console.log('   4. Sistema salva service_order SEM dados PIX');
    console.log('   5. Asaas envia webhook ‚Üí /api/webhooks/asaas');
    console.log('   6. Webhook do Asaas tenta atualizar mas dados j√° est√£o incompletos');
    
    // 3. Solu√ß√£o proposta
    console.log('\n3Ô∏è‚É£ SOLU√á√ÉO PROPOSTA:');
    console.log('   ‚úÖ Modificar cria√ß√£o de cobran√ßa para aguardar resposta do webhook externo');
    console.log('   ‚úÖ Salvar dados PIX retornados pelo webhook externo');
    console.log('   ‚úÖ Garantir que service_order seja criado com QR code');
    console.log('   ‚úÖ Webhook do Asaas apenas confirma pagamento');
    
    // 4. Implementar corre√ß√£o
    console.log('\n4Ô∏è‚É£ IMPLEMENTANDO CORRE√á√ÉO:');
    
    // Primeiro, vamos verificar se h√° cobran√ßas sem QR code para corrigir
    console.log('   - Buscando cobran√ßas sem QR code...');
    
    const diegoCompanyId = '4d4e7f8a-9b2c-4d5e-8f9a-1b2c3d4e5f6a';
    const paymentsResponse = await fetch(`${API_BASE}/api/payments/company/${diegoCompanyId}`);
    
    if (paymentsResponse.ok) {
      const paymentsData = await paymentsResponse.json();
      const paymentsWithoutQR = paymentsData.data?.filter(p => !p.qr_code && !p.pix_code) || [];
      
      console.log(`   - Cobran√ßas sem QR code: ${paymentsWithoutQR.length}`);
      
      if (paymentsWithoutQR.length > 0) {
        console.log('   - Tentando corrigir cobran√ßas existentes...');
        
        for (const payment of paymentsWithoutQR.slice(0, 3)) { // Corrigir apenas as 3 primeiras
          console.log(`\n   üîÑ Corrigindo cobran√ßa: ${payment.payment_id}`);
          
          if (payment.asaas_payment_id) {
            // Buscar detalhes via API
            const detailsResponse = await fetch(`${API_BASE}/api/payments/${payment.asaas_payment_id}`);
            
            if (detailsResponse.ok) {
              const detailsData = await detailsResponse.json();
              
              if (detailsData.payment?.webhook_response) {
                const webhook = detailsData.payment.webhook_response;
                
                if (webhook.payment?.pixTransaction?.qrCode) {
                  const qrCode = webhook.payment.pixTransaction.qrCode;
                  
                  console.log(`     - QR Code encontrado no webhook!`);
                  console.log(`     - Encoded Image: ${qrCode.encodedImage ? 'SIM' : 'N√ÉO'}`);
                  console.log(`     - Payload: ${qrCode.payload ? 'SIM' : 'N√ÉO'}`);
                  
                  // Aqui normalmente atualizar√≠amos o banco, mas como estamos usando o proxy,
                  // vamos apenas mostrar que os dados est√£o dispon√≠veis
                  console.log(`     ‚úÖ Dados PIX dispon√≠veis para corre√ß√£o`);
                } else {
                  console.log(`     ‚ùå Dados PIX n√£o encontrados no webhook`);
                }
              } else {
                console.log(`     ‚ùå Webhook response n√£o encontrado`);
              }
            }
          }
        }
      }
    }
    
    console.log('\n5Ô∏è‚É£ PR√ìXIMAS A√á√ïES NECESS√ÅRIAS:');
    console.log('   1. üîß Modificar /api/payments/create-service-order para:');
    console.log('      - Aguardar resposta completa do webhook externo');
    console.log('      - Extrair QR code da resposta');
    console.log('      - Salvar service_order com dados PIX completos');
    
    console.log('   2. üîß Modificar webhook do Asaas para:');
    console.log('      - Apenas confirmar pagamentos existentes');
    console.log('      - N√£o tentar criar dados PIX (j√° devem existir)');
    
    console.log('   3. üîß Garantir que modal busque dados de:');
    console.log('      - service_orders (fonte principal)');
    console.log('      - Campos: qr_code_image, pix_payload, invoice_url');
    
    console.log('\n‚úÖ AN√ÅLISE COMPLETA!');
    console.log('\nüéØ PROBLEMA RAIZ IDENTIFICADO:');
    console.log('   O webhook externo (n8n) retorna dados PIX, mas o sistema');
    console.log('   n√£o est√° salvando esses dados no service_order inicial.');
    console.log('   O webhook do Asaas chega depois, mas a cobran√ßa j√° foi');
    console.log('   criada sem os dados PIX.');
    
    console.log('\nüîß CORRE√á√ÉO PRINCIPAL NECESS√ÅRIA:');
    console.log('   Modificar a cria√ß√£o de cobran√ßa para salvar os dados PIX');
    console.log('   retornados pelo webhook externo IMEDIATAMENTE.');
    
  } catch (error) {
    console.error('‚ùå Erro na corre√ß√£o:', error);
  }
}

// Executar a corre√ß√£o
fixWebhookQRComplete();