// Script simples para testar se o chat est√° funcionando

async function testChatFunctionality() {
  console.log('üß™ === TESTE FINAL DO CHAT ===');
  
  const multaId = '83840e05-9941-47ad-8fea-68bde8f07083';
  console.log('üÜî Testando com multaId:', multaId);
  
  try {
    // Simular o que acontece no frontend
    console.log('\n1. üìã Simulando carregamento de mensagens...');
    
    // Dados que deveriam estar na tabela (baseado no que inserimos)
    const mockMessages = [
      {
        id: 1,
        session_id: multaId,
        message: {
          type: 'human',
          content: 'Ol√°, preciso de ajuda para criar um recurso para esta multa de velocidade. A multa √© do tipo leve e foi por excesso de velocidade de at√© 20%.'
        }
      },
      {
        id: 2,
        session_id: multaId,
        message: {
          type: 'ai',
          content: 'Ol√°! Vou ajud√°-lo a criar um recurso para sua multa de velocidade. Com base nas informa√ß√µes que voc√™ forneceu, vejo que se trata de uma infra√ß√£o leve por excesso de velocidade de at√© 20%.\n\nPara multas deste tipo, temos algumas estrat√©gias de defesa:\n\n1. **Verifica√ß√£o da calibra√ß√£o do equipamento**: Podemos questionar se o radar estava devidamente calibrado\n2. **An√°lise das condi√ß√µes da via**: Verificar se a sinaliza√ß√£o estava adequada\n3. **Margem de erro**: Considerar a margem de toler√¢ncia do equipamento\n\nVoc√™ gostaria que eu elabore um recurso completo baseado em alguma dessas estrat√©gias?'
        }
      },
      {
        id: 3,
        session_id: multaId,
        message: {
          type: 'human',
          content: 'Sim, por favor! Gostaria de um recurso completo questionando a calibra√ß√£o do equipamento e a margem de erro. A multa foi aplicada na Rua das Flores, 123.'
        }
      },
      {
        id: 4,
        session_id: multaId,
        message: {
          type: 'ai',
          content: 'Perfeito! Vou elaborar um recurso completo para voc√™:\n\n**RECURSO DE MULTA - QUESTIONAMENTO DE CALIBRA√á√ÉO**\n\nExcelent√≠ssimo Senhor Diretor do DETRAN,\n\nVenho, respeitosamente, por meio deste, apresentar RECURSO contra o Auto de Infra√ß√£o n¬∫ J001565490, lavrado em desfavor do ve√≠culo de placa [PLACA], por suposta infra√ß√£o ao art. 218, I do CTB.\n\n**DOS FATOS:**\nO auto de infra√ß√£o foi lavrado por equipamento eletr√¥nico na Rua das Flores, 123, alegando excesso de velocidade de at√© 20%.\n\n**DO DIREITO:**\n1. **Questionamento da Calibra√ß√£o**: N√£o h√° comprova√ß√£o de que o equipamento estava devidamente calibrado\n2. **Margem de Erro**: Deve ser considerada a margem de toler√¢ncia t√©cnica\n3. **√înus da Prova**: Cabe ao √≥rg√£o autuador provar a regularidade do equipamento\n\n**DO PEDIDO:**\nRequer-se o CANCELAMENTO do auto de infra√ß√£o por falta de comprova√ß√£o da regularidade do equipamento medidor.\n\nTermos em que pede deferimento.\n\n[Local], [Data]\n[Nome do Requerente]'
        }
      }
    ];
    
    console.log('‚úÖ Mensagens simuladas:', mockMessages.length);
    mockMessages.forEach((msg, index) => {
      console.log(`   ${index + 1}. Tipo: ${msg.message.type}, Conte√∫do: ${msg.message.content.substring(0, 50)}...`);
    });
    
    // 2. Simular formata√ß√£o das mensagens (como no c√≥digo real)
    console.log('\n2. üîÑ Formatando mensagens...');
    const formattedMessages = mockMessages.map((msg, index) => {
      const isUser = msg.message.type === 'human';
      
      return {
        id: `n8n_${msg.id}`,
        type: isUser ? 'user' : 'ai',
        content: msg.message.content || '',
        timestamp: new Date() // Usar timestamp atual
      };
    });
    
    console.log('‚úÖ Mensagens formatadas:', formattedMessages.length);
    formattedMessages.forEach((msg, index) => {
      console.log(`   ${index + 1}. ID: ${msg.id}, Tipo: ${msg.type}`);
      console.log(`      Timestamp: ${msg.timestamp.toLocaleTimeString()}`);
      console.log(`      Conte√∫do: ${msg.content.substring(0, 80)}...`);
    });
    
    // 3. Verificar condi√ß√µes de exibi√ß√£o (como no c√≥digo real)
    console.log('\n3. üéØ Verificando condi√ß√µes de exibi√ß√£o...');
    const n8nChatActive = formattedMessages.length > 0;
    const shouldShowChat = n8nChatActive;
    
    console.log('üìä Estados simulados:');
    console.log('  - n8nChatMessages.length:', formattedMessages.length);
    console.log('  - n8nChatActive:', n8nChatActive);
    console.log('  - shouldShowChat:', shouldShowChat);
    
    // 4. Simular renderiza√ß√£o
    console.log('\n4. üñ•Ô∏è Simulando renderiza√ß√£o...');
    if (shouldShowChat) {
      console.log('‚úÖ RENDERIZA√á√ÉO: Chat seria exibido!');
      console.log('üì± Interface mostraria:');
      console.log('   - T√≠tulo: "Chat com IA" + badge "Ativo"');
      console.log('   - Mensagens:', formattedMessages.length);
      console.log('   - Input para nova mensagem: habilitado');
      
      // Simular cada mensagem renderizada
      formattedMessages.forEach((msg, index) => {
        const alignment = msg.type === 'user' ? 'direita' : 'esquerda';
        const bgColor = msg.type === 'user' ? 'azul' : 'branco';
        console.log(`   - Mensagem ${index + 1}: ${alignment}, fundo ${bgColor}`);
        console.log(`     Hor√°rio: ${msg.timestamp.toLocaleTimeString()}`);
      });
    } else {
      console.log('‚ùå RENDERIZA√á√ÉO: Placeholder seria exibido');
      console.log('üì± Interface mostraria:');
      console.log('   - √çcone de chat cinza');
      console.log('   - Texto: "Complete a extra√ß√£o de dados para ativar o chat"');
    }
    
    // 5. Resultado final
    console.log('\n5. üèÅ RESULTADO FINAL:');
    if (shouldShowChat && formattedMessages.length === 4) {
      console.log('üéâ SUCESSO COMPLETO!');
      console.log('‚úÖ O chat deveria estar funcionando perfeitamente');
      console.log('‚úÖ 4 mensagens deveriam ser exibidas');
      console.log('‚úÖ Interface deveria estar ativa e responsiva');
      console.log('‚úÖ Usu√°rio deveria poder enviar novas mensagens');
    } else {
      console.log('‚ùå PROBLEMA IDENTIFICADO!');
      console.log('üí° Poss√≠veis causas:');
      console.log('   - Mensagens n√£o foram carregadas do banco');
      console.log('   - n8nChatActive n√£o foi definido como true');
      console.log('   - Erro na formata√ß√£o das mensagens');
      console.log('   - Problema na l√≥gica de renderiza√ß√£o');
    }
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  }
}

// Executar o teste
testChatFunctionality();