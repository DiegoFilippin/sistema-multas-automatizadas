/**
 * Corre√ß√£o para o problema de inicializa√ß√£o do chat n8n
 * 
 * PROBLEMA IDENTIFICADO:
 * - O chat n8n n√£o est√° sendo iniciado automaticamente ap√≥s a extra√ß√£o
 * - A interface n√£o mostra o chat mesmo quando n8nChatActive √© true
 * - As mensagens n√£o aparecem na tela
 * 
 * SOLU√á√ÉO:
 * - Garantir que startN8nChat seja chamado ap√≥s salvamento bem-sucedido
 * - Adicionar logs detalhados para debug
 * - Verificar se o estado n8nChatActive est√° sendo definido corretamente
 * - Garantir que as mensagens sejam adicionadas ao estado n8nChatMessages
 */

const fs = require('fs');
const path = require('path');

// Caminho do arquivo principal
const filePath = path.join(__dirname, 'src', 'pages', 'TesteRecursoIA.tsx');

// Fun√ß√£o para aplicar corre√ß√µes
function aplicarCorrecoes() {
  console.log('üîß === APLICANDO CORRE√á√ïES NO CHAT N8N ===\n');
  
  try {
    // Ler o arquivo atual
    let content = fs.readFileSync(filePath, 'utf8');
    
    // 1. Adicionar log detalhado no in√≠cio da fun√ß√£o startN8nChat
    const startN8nChatPattern = /const startN8nChat = async \(mensagemInicial: string\) => {/;
    if (startN8nChatPattern.test(content)) {
      content = content.replace(
        startN8nChatPattern,
        `const startN8nChat = async (mensagemInicial: string) => {
    console.log('üöÄ === INICIANDO CHAT N8N (DETALHADO) ===');
    console.log('üìä Estado antes do in√≠cio:', {
      n8nChatActive,
      multaId,
      mensagemInicial,
      n8nChatMessagesLength: n8nChatMessages.length
    });`
      );
      console.log('‚úÖ 1. Adicionado log detalhado no startN8nChat');
    }
    
    // 2. Garantir que setN8nChatActive(true) seja chamado no in√≠cio
    const setN8nChatActivePattern = /setN8nChatActive\(true\);/;
    if (setN8nChatActivePattern.test(content)) {
      content = content.replace(
        /setN8nChatActive\(true\);/,
        `setN8nChatActive(true);
      console.log('‚úÖ n8nChatActive definido como true');`
      );
      console.log('‚úÖ 2. Adicionado log para setN8nChatActive');
    }
    
    // 3. Adicionar log quando as mensagens s√£o definidas
    const setN8nChatMessagesPattern = /setN8nChatMessages\(\[initialUserMessage, initialAiMessage\]\);/;
    if (setN8nChatMessagesPattern.test(content)) {
      content = content.replace(
        /setN8nChatMessages\(\[initialUserMessage, initialAiMessage\]\);/,
        `setN8nChatMessages([initialUserMessage, initialAiMessage]);
      console.log('‚úÖ Mensagens do chat definidas:', {
        userMessage: initialUserMessage.content.substring(0, 50) + '...',
        aiMessage: initialAiMessage.content.substring(0, 50) + '...',
        totalMessages: 2
      });`
      );
      console.log('‚úÖ 3. Adicionado log para setN8nChatMessages');
    }
    
    // 4. Adicionar verifica√ß√£o de estado ap√≥s inicializa√ß√£o
    const toastSuccessPattern = /toast\.success\('Chat n8n iniciado com sucesso! Dados enviados para o sistema de IA\.'\);/;
    if (toastSuccessPattern.test(content)) {
      content = content.replace(
        /toast\.success\('Chat n8n iniciado com sucesso! Dados enviados para o sistema de IA\.'\);/,
        `toast.success('Chat n8n iniciado com sucesso! Dados enviados para o sistema de IA.');
      
      // Verifica√ß√£o final do estado
      console.log('üîç === ESTADO FINAL AP√ìS INICIALIZA√á√ÉO ===');
      console.log('üìä Estado do chat:', {
        n8nChatActive: true, // Deve ser true
        n8nChatMessagesCount: 2, // Deve ter 2 mensagens
        multaId,
        chatSessionId: sessionId
      });
      
      // For√ßar re-render se necess√°rio
      setTimeout(() => {
        console.log('üîÑ Verificando estado ap√≥s timeout...');
        console.log('n8nChatActive atual:', n8nChatActive);
        console.log('n8nChatMessages atual:', n8nChatMessages.length);
      }, 1000);`
      );
      console.log('‚úÖ 4. Adicionado verifica√ß√£o de estado final');
    }
    
    // 5. Adicionar log no handleSaveMultaAutomatically quando o chat √© iniciado
    const chatIniciadoPattern = /console\.log\('‚úÖ Chat n8n iniciado automaticamente com sucesso!'\);/;
    if (chatIniciadoPattern.test(content)) {
      content = content.replace(
        /console\.log\('‚úÖ Chat n8n iniciado automaticamente com sucesso!'\);/,
        `console.log('‚úÖ Chat n8n iniciado automaticamente com sucesso!');
          console.log('üîç Verificando estado ap√≥s in√≠cio autom√°tico:', {
            n8nChatActive,
            n8nChatMessagesLength: n8nChatMessages.length,
            multaId: multaSalva.id
          });`
      );
      console.log('‚úÖ 5. Adicionado log no in√≠cio autom√°tico do chat');
    }
    
    // 6. Adicionar debug na renderiza√ß√£o do chat
    const chatRenderPattern = /{n8nChatActive \? \(/;
    if (chatRenderPattern.test(content)) {
      content = content.replace(
        /{n8nChatActive \? \(/,
        `{(() => {
                console.log('üñ•Ô∏è Renderizando chat - Estado:', {
                  n8nChatActive,
                  messagesCount: n8nChatMessages.length,
                  shouldShowChat: n8nChatActive
                });
                return n8nChatActive;
              })() ? (`
      );
      console.log('‚úÖ 6. Adicionado debug na renderiza√ß√£o do chat');
    }
    
    // 7. Adicionar useEffect para monitorar mudan√ßas de estado
    const useEffectPattern = /useEffect\(\(\) => {\s*const loadChatHistory/;
    if (useEffectPattern.test(content)) {
      content = content.replace(
        /useEffect\(\(\) => {\s*const loadChatHistory/,
        `// Debug: Monitor de estado do chat
  useEffect(() => {
    console.log('üîÑ Estado do chat mudou:', {
      n8nChatActive,
      messagesCount: n8nChatMessages.length,
      multaId,
      chatSessionId
    });
  }, [n8nChatActive, n8nChatMessages.length, multaId, chatSessionId]);

  useEffect(() => {
    const loadChatHistory`
      );
      console.log('‚úÖ 7. Adicionado useEffect para monitorar estado');
    }
    
    // Salvar o arquivo modificado
    fs.writeFileSync(filePath, content, 'utf8');
    console.log('\n‚úÖ === CORRE√á√ïES APLICADAS COM SUCESSO ===');
    console.log('üìÅ Arquivo modificado:', filePath);
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Erro ao aplicar corre√ß√µes:', error);
    return false;
  }
}

// Fun√ß√£o para reverter corre√ß√µes (se necess√°rio)
function reverterCorrecoes() {
  console.log('üîÑ === REVERTENDO CORRE√á√ïES ===\n');
  
  try {
    // Fazer backup antes de reverter
    const backupPath = filePath + '.backup';
    if (fs.existsSync(backupPath)) {
      fs.copyFileSync(backupPath, filePath);
      console.log('‚úÖ Corre√ß√µes revertidas com sucesso');
      return true;
    } else {
      console.log('‚ö†Ô∏è Arquivo de backup n√£o encontrado');
      return false;
    }
  } catch (error) {
    console.error('‚ùå Erro ao reverter corre√ß√µes:', error);
    return false;
  }
}

// Fun√ß√£o principal
function main() {
  const args = process.argv.slice(2);
  const action = args[0] || 'apply';
  
  // Fazer backup do arquivo original
  const backupPath = filePath + '.backup';
  if (!fs.existsSync(backupPath)) {
    fs.copyFileSync(filePath, backupPath);
    console.log('üìã Backup criado:', backupPath);
  }
  
  switch (action) {
    case 'apply':
      const success = aplicarCorrecoes();
      if (success) {
        console.log('\nüéâ Corre√ß√µes aplicadas! Execute o projeto e teste o fluxo:');
        console.log('1. Fa√ßa upload de um documento');
        console.log('2. Aguarde a extra√ß√£o');
        console.log('3. Verifique se o chat aparece automaticamente');
        console.log('4. Observe os logs no console do navegador');
      }
      break;
      
    case 'revert':
      reverterCorrecoes();
      break;
      
    default:
      console.log('Uso: node fix_chat_initialization.js [apply|revert]');
  }
}

if (require.main === module) {
  main();
}

module.exports = {
  aplicarCorrecoes,
  reverterCorrecoes
};