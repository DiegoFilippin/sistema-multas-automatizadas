/**
 * Script para testar e debugar a detec√ß√£o de recursos '[RECURSO GERADO]'
 * Simula o problema reportado pelo usu√°rio
 */

import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://your-project.supabase.co';
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || 'your-anon-key';
const supabase = createClient(supabaseUrl, supabaseKey);

// Conte√∫do da mensagem recebida pelo usu√°rio
const mensagemRecebida = `[RECURSO GERADO]

√Ä
PREFEITURA MUNICIPAL DE BLUMENAU ‚Äì SETERB
Ref.: Auto de Infra√ß√£o n¬∫ BLU0589972
Autuado: DISK CAR LOCACAO DE VEICULOS SA
Ve√≠culo: VW/GOL 1.6L MB5 ‚Äì Placa RDW0H45
Data da Infra√ß√£o: 15/03/2025
C√≥digo da Infra√ß√£o: 7455-0

DOS FATOS E FUNDAMENTOS

O presente recurso visa a anula√ß√£o do Auto de Infra√ß√£o n¬∫ BLU0589972, que imputa ao ve√≠culo VW/GOL 1.6L MB5, placa RDW0H45, a infra√ß√£o de transitar em velocidade superior √† m√°xima permitida em at√© 20%, conforme auto lavrado em 15 de mar√ßo de 2025.

Em an√°lise ao auto de infra√ß√£o e aos normativos do Manual Brasileiro de Fiscaliza√ß√£o de Tr√¢nsito (MBFT), verifica-se que o documento apresenta falhas que comprometem sua validade jur√≠dica, a saber:

1. Aus√™ncia da indica√ß√£o expressa da velocidade m√°xima permitida no local da infra√ß√£o e da velocidade aferida pelo equipamento eletr√¥nico, dado essencial para caracteriza√ß√£o da infra√ß√£o de tr√¢nsito, conforme exigido pela Resolu√ß√£o n¬∫ 900/CONTRAN/2022 e pelo MBFT.

2. O auto refere fiscaliza√ß√£o por equipamento fixo, mas n√£o comprova a data da √∫ltima aferi√ß√£o ou validade do equipamento utilizado para medi√ß√£o da velocidade, requisito indispens√°vel para assegurar confiabilidade e regularidade da fiscaliza√ß√£o.

3. A descri√ß√£o do endere√ßo do local da infra√ß√£o √© gen√©rica ("Rua Amazonas pr√≥ximo n√∫mero 840, Blumenau - Santa Catarina"), o que pode causar ambiguidade na identifica√ß√£o precisa do ponto da infra√ß√£o, dificultando o exerc√≠cio pleno do direito de defesa.

Esses v√≠cios formalmente qualific√°veis violam os princ√≠pios constitucionais da legalidade e do devido processo legal (art. 5¬∫, inciso LIV da Constitui√ß√£o Federal), bem como o artigo 281 do C√≥digo de Tr√¢nsito Brasileiro, que imp√µe requisitos para a validade do auto de infra√ß√£o.

Diante disso, requer-se o cancelamento do referido auto de infra√ß√£o.

Alternativamente, caso n√£o seja este o entendimento, requer-se a convers√£o da penalidade em advert√™ncia por escrito, considerando a natureza leve da infra√ß√£o e aus√™ncia de reincid√™ncia do autuado no per√≠odo legal, em atendimento ao artigo 267 do CTB.

Por fim, reitera-se o compromisso com o cumprimento das normas de tr√¢nsito e a preserva√ß√£o dos direitos fundamentais do cidad√£o.

Termos em que,
Pede deferimento.

Blumenau, 16 de setembro de 2025.

---

Fundamenta√ß√£o Legal:
- Art. 281, C√≥digo de Tr√¢nsito Brasileiro
- Art. 267, C√≥digo de Tr√¢nsito Brasileiro
- Resolu√ß√£o n¬∫ 900/CONTRAN/2022
- Manual Brasileiro de Fiscaliza√ß√£o de Tr√¢nsito (MBFT)
- Art. 5¬∫, inciso LIV, Constitui√ß√£o Federal

---

Solicito a grava√ß√£o deste recurso para acompanhamento dos tr√¢mites processuais.`;

// Fun√ß√£o de detec√ß√£o (copiada do c√≥digo atual)
function testarDeteccaoRecurso(responseContent) {
  console.log('üîç === INICIANDO TESTE DE DETEC√á√ÉO DE RECURSO ===');
  console.log('üìù Conte√∫do recebido (primeiros 100 chars):', responseContent.substring(0, 100));
  
  // Verificar se a resposta cont√©m um recurso (indicadores comuns)
  const indicadoresRecurso = [
    '[RECURSO GERADO]',
    'RECURSO GERADO',
    '[RECURSO]',
    'RECURSO',
    'DEFESA',
    'EXCELENT√çSSIMO',
    'PEDIDO',
    'FUNDAMENTA√á√ÉO',
    'REQUER',
    'DEFERIMENTO',
    'ANULA√á√ÉO',
    'AUTO DE INFRA√á√ÉO'
  ];
  
  const responseUpper = responseContent.toUpperCase();
  const indicadoresEncontrados = indicadoresRecurso.filter(indicador => 
    responseUpper.includes(indicador.toUpperCase())
  );
  
  console.log('üîç Indicadores encontrados:', indicadoresEncontrados);
  
  const contemRecurso = indicadoresEncontrados.length > 0;
  
  // Verificar se tem estrutura de recurso (mais de 200 caracteres e cont√©m indicadores)
  const isRecurso = contemRecurso && responseContent.length > 200;
  
  console.log('üìä Resultado da detec√ß√£o:', {
    contemRecurso,
    tamanhoConteudo: responseContent.length,
    isRecurso,
    indicadoresEncontrados
  });
  
  if (isRecurso) {
    console.log('üéØ === RECURSO DETECTADO ===');
    console.log('üìù Conte√∫do:', responseContent.substring(0, 200) + '...');
    console.log('üè∑Ô∏è Indicadores que ativaram a detec√ß√£o:', indicadoresEncontrados);
    return true;
  } else {
    console.log('‚ÑπÔ∏è === RECURSO N√ÉO DETECTADO ===');
    console.log('‚ùå Motivos poss√≠veis:');
    if (!contemRecurso) {
      console.log('  - Nenhum indicador encontrado no conte√∫do');
      console.log('  - Indicadores procurados:', indicadoresRecurso);
    }
    if (responseContent.length <= 200) {
      console.log('  - Conte√∫do muito curto:', responseContent.length, 'caracteres (m√≠nimo: 200)');
    }
    return false;
  }
}

// Fun√ß√£o para verificar recursos salvos no banco
async function verificarRecursosSalvos() {
  try {
    console.log('\nüîç === VERIFICANDO RECURSOS SALVOS NO BANCO ===');
    
    const { data: recursos, error } = await supabase
      .from('recursos_gerados')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(5);
    
    if (error) {
      console.error('‚ùå Erro ao buscar recursos:', error);
      return;
    }
    
    console.log('üìã Recursos encontrados:', recursos?.length || 0);
    
    if (recursos && recursos.length > 0) {
      recursos.forEach((recurso, index) => {
        console.log(`\nüìÑ Recurso ${index + 1}:`);
        console.log('  - ID:', recurso.id);
        console.log('  - T√≠tulo:', recurso.titulo);
        console.log('  - Tipo:', recurso.tipo_recurso);
        console.log('  - Status:', recurso.status);
        console.log('  - Criado em:', recurso.created_at);
        console.log('  - Conte√∫do (100 chars):', recurso.conteudo_recurso?.substring(0, 100) + '...');
        console.log('  - Metadata:', recurso.metadata);
      });
    } else {
      console.log('‚ö†Ô∏è Nenhum recurso encontrado no banco');
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar recursos salvos:', error);
  }
}

// Fun√ß√£o para verificar sess√µes de chat ativas
async function verificarSessoesChat() {
  try {
    console.log('\nüîç === VERIFICANDO SESS√ïES DE CHAT ===');
    
    const { data: sessions, error } = await supabase
      .from('chat_sessions')
      .select('*')
      .eq('status', 'active')
      .order('created_at', { ascending: false })
      .limit(5);
    
    if (error) {
      console.error('‚ùå Erro ao buscar sess√µes:', error);
      return;
    }
    
    console.log('üí¨ Sess√µes ativas encontradas:', sessions?.length || 0);
    
    if (sessions && sessions.length > 0) {
      sessions.forEach((session, index) => {
        console.log(`\nüí¨ Sess√£o ${index + 1}:`);
        console.log('  - ID:', session.id);
        console.log('  - Company ID:', session.company_id);
        console.log('  - Multa ID:', session.multa_id);
        console.log('  - Status:', session.status);
        console.log('  - Criada em:', session.created_at);
      });
    } else {
      console.log('‚ö†Ô∏è Nenhuma sess√£o ativa encontrada');
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar sess√µes de chat:', error);
  }
}

// Fun√ß√£o principal de teste
async function executarTeste() {
  console.log('üöÄ === TESTE DE DEBUG DA DETEC√á√ÉO DE RECURSOS ===\n');
  
  try {
    // 1. Testar a detec√ß√£o com a mensagem recebida
    console.log('1Ô∏è‚É£ Testando detec√ß√£o com mensagem real do usu√°rio:');
    const detectado = testarDeteccaoRecurso(mensagemRecebida);
    
    if (detectado) {
      console.log('‚úÖ A detec√ß√£o DEVERIA funcionar com esta mensagem!');
    } else {
      console.log('‚ùå A detec√ß√£o N√ÉO funcionou - h√° um problema!');
    }
    
    // 2. Verificar recursos salvos no banco
    await verificarRecursosSalvos();
    
    // 3. Verificar sess√µes de chat ativas
    await verificarSessoesChat();
    
    // 4. An√°lise detalhada
    console.log('\nüîç === AN√ÅLISE DETALHADA ===');
    console.log('üìè Tamanho da mensagem:', mensagemRecebida.length, 'caracteres');
    console.log('üéØ Come√ßa com [RECURSO GERADO]:', mensagemRecebida.startsWith('[RECURSO GERADO]'));
    console.log('üìù Cont√©m indicadores suficientes:', mensagemRecebida.includes('RECURSO') && mensagemRecebida.includes('FUNDAMENTA√á√ÉO'));
    
    // 5. Poss√≠veis causas do problema
    console.log('\nüîß === POSS√çVEIS CAUSAS DO PROBLEMA ===');
    console.log('1. A fun√ß√£o detectarESalvarRecurso() n√£o est√° sendo chamada');
    console.log('2. Erro no salvamento no banco de dados (RLS, permiss√µes)');
    console.log('3. Componente RecursosGerados n√£o est√° atualizando');
    console.log('4. Problema na condi√ß√£o de renderiza√ß√£o do componente');
    console.log('5. Erro silencioso n√£o capturado nos logs');
    
    console.log('\n‚úÖ Teste conclu√≠do!');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  }
}

// Executar o teste
executarTeste();