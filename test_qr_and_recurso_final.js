// Teste final para verificar QR code sempre vis√≠vel e bot√£o de recurso
// Executar no console do navegador na p√°gina de cobran√ßas

console.log('üß™ === TESTE FINAL: QR CODE + BOT√ÉO RECURSO ===');

// Fun√ß√£o para testar uma cobran√ßa espec√≠fica
function testCobrancaCompleta(paymentId) {
  console.log(`\nüîç Testando cobran√ßa: ${paymentId}`);
  
  // 1. Encontrar a cobran√ßa na lista
  const cobrancaRows = document.querySelectorAll('[data-payment-id], tr');
  let targetRow = null;
  
  for (const row of cobrancaRows) {
    const text = row.textContent || '';
    if (text.includes(paymentId)) {
      targetRow = row;
      break;
    }
  }
  
  if (!targetRow) {
    console.log('‚ùå Cobran√ßa n√£o encontrada na lista');
    return false;
  }
  
  console.log('‚úÖ Cobran√ßa encontrada na lista');
  
  // 2. Clicar no bot√£o "Ver Detalhes"
  const detailsButton = targetRow.querySelector('button[title*="detalhes"], button:has(svg)');
  if (!detailsButton) {
    console.log('‚ùå Bot√£o "Ver Detalhes" n√£o encontrado');
    return false;
  }
  
  console.log('üñ±Ô∏è Clicando em "Ver Detalhes"...');
  detailsButton.click();
  
  // 3. Aguardar modal abrir
  setTimeout(() => {
    const modal = document.querySelector('[role="dialog"], .fixed.inset-0, .modal');
    if (!modal) {
      console.log('‚ùå Modal n√£o abriu');
      return;
    }
    
    console.log('‚úÖ Modal aberto com sucesso');
    
    // 4. Verificar QR code PIX
    console.log('\nüîç Verificando QR Code PIX...');
    const pixSection = modal.querySelector('.bg-gradient-to-br.from-green-50');
    
    if (pixSection) {
      console.log('‚úÖ Se√ß√£o PIX encontrada');
      
      const qrImage = pixSection.querySelector('img[alt*="QR"], img[src*="base64"], img[src*="data:image"]');
      if (qrImage) {
        console.log('‚úÖ QR Code vis√≠vel!');
        console.log('  - Src:', qrImage.src.substring(0, 50) + '...');
        console.log('  - Alt:', qrImage.alt);
      } else {
        console.log('‚ùå QR Code n√£o encontrado');
        
        // Verificar se mostra "QR Code Indispon√≠vel"
        const unavailableMsg = pixSection.textContent;
        if (unavailableMsg.includes('QR Code Indispon√≠vel')) {
          console.log('‚ö†Ô∏è Mostra "QR Code Indispon√≠vel"');
        }
      }
      
      // Verificar c√≥digo PIX para copiar
      const pixCode = pixSection.querySelector('.font-mono');
      if (pixCode) {
        console.log('‚úÖ C√≥digo PIX para copiar encontrado');
        console.log('  - C√≥digo:', pixCode.textContent.substring(0, 30) + '...');
      } else {
        console.log('‚ö†Ô∏è C√≥digo PIX para copiar n√£o encontrado');
      }
    } else {
      console.log('‚ùå Se√ß√£o PIX n√£o encontrada');
    }
    
    // 5. Verificar bot√£o de recurso
    console.log('\nüîç Verificando Bot√£o de Recurso...');
    const recursoSection = modal.querySelector('.bg-gradient-to-br.from-blue-50');
    
    if (recursoSection) {
      console.log('‚úÖ Se√ß√£o de Recurso encontrada');
      
      const iniciarButton = recursoSection.querySelector('button:has(.lucide-scale), button[class*="green"]');
      const verButton = recursoSection.querySelector('button:has(.lucide-eye), button[class*="blue"]');
      
      if (iniciarButton) {
        console.log('‚úÖ Bot√£o "Iniciar Recurso" encontrado');
        console.log('  - Texto:', iniciarButton.textContent.trim());
      } else if (verButton) {
        console.log('‚úÖ Bot√£o "Ver Recurso Existente" encontrado');
        console.log('  - Texto:', verButton.textContent.trim());
      } else {
        console.log('‚ùå Nenhum bot√£o de recurso encontrado');
      }
      
      // Verificar status do pagamento na se√ß√£o
      const statusText = recursoSection.textContent;
      if (statusText.includes('Pagamento Confirmado')) {
        console.log('‚úÖ Status: Pagamento Confirmado');
      } else if (statusText.includes('j√° possui um recurso')) {
        console.log('‚úÖ Status: Recurso j√° existe');
      } else {
        console.log('‚ö†Ô∏è Status n√£o identificado');
      }
    } else {
      console.log('‚ùå Se√ß√£o de Recurso n√£o encontrada');
      console.log('‚ÑπÔ∏è Isso pode ser normal se o pagamento n√£o est√° confirmado');
    }
    
    // 6. Verificar logs no console
    console.log('\nüìã Resumo do Teste:');
    console.log('  - Modal: ‚úÖ Abriu corretamente');
    console.log('  - QR Code:', qrImage ? '‚úÖ Vis√≠vel' : '‚ùå N√£o vis√≠vel');
    console.log('  - Se√ß√£o PIX:', pixSection ? '‚úÖ Presente' : '‚ùå Ausente');
    console.log('  - Se√ß√£o Recurso:', recursoSection ? '‚úÖ Presente' : '‚ùå Ausente');
    
    // Fechar modal
    setTimeout(() => {
      const closeButton = modal.querySelector('button:has(.lucide-x), .close, [aria-label*="fechar"]');
      if (closeButton) {
        closeButton.click();
        console.log('üîí Modal fechado');
      }
    }, 2000);
    
  }, 1500);
  
  return true;
}

// Fun√ß√£o para testar m√∫ltiplas cobran√ßas
function testMultiplasCobrancas() {
  const cobrancasParaTestar = [
    'pay_kxq6p35gavzescuz',
    'pay_nzlbc860tdx8sp34'
  ];
  
  console.log(`\nüéØ Testando ${cobrancasParaTestar.length} cobran√ßas...`);
  
  cobrancasParaTestar.forEach((paymentId, index) => {
    setTimeout(() => {
      testCobrancaCompleta(paymentId);
    }, index * 8000); // 8 segundos entre cada teste
  });
}

// Fun√ß√£o para verificar se estamos na p√°gina correta
function verificarPagina() {
  const url = window.location.href;
  if (url.includes('/cobrancas') || url.includes('/meus-servicos')) {
    console.log('‚úÖ P√°gina correta detectada:', url);
    return true;
  } else {
    console.log('‚ùå P√°gina incorreta. Acesse /cobrancas ou /meus-servicos');
    return false;
  }
}

// Executar teste
if (verificarPagina()) {
  console.log('\nüöÄ Iniciando testes em 2 segundos...');
  setTimeout(() => {
    testMultiplasCobrancas();
  }, 2000);
} else {
  console.log('\nüìç Para executar o teste:');
  console.log('1. Acesse http://localhost:5173/cobrancas');
  console.log('2. Execute este script novamente');
}

// Exportar fun√ß√µes para uso manual
window.testCobrancaCompleta = testCobrancaCompleta;
window.testMultiplasCobrancas = testMultiplasCobrancas;

console.log('\nüí° Fun√ß√µes dispon√≠veis:');
console.log('- testCobrancaCompleta("pay_xxx") - Testa uma cobran√ßa espec√≠fica');
console.log('- testMultiplasCobrancas() - Testa m√∫ltiplas cobran√ßas automaticamente');
console.log('\n=== FIM DO SCRIPT DE TESTE ===');